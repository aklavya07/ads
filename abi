function _0x562c() {
    const _0x1407d3 = [
        '861ZxOHEF',
        'HTTP\x20error!\x20Status:\x20',
        'clipboard',
        '143YZwDyC',
        '\x20using\x20',
        'candidates',
        '\x0a\x20print\x20in\x20proper\x20c++\x20Language\x20\x20the\x20output\x20that\x20he/she\x20asked\x20for,\x20keeping\x20in\x20mind\x20this\x20thing.',
        '[aria-labelledby=\x22instruction-card\x22]',
        'div[aria-labelledby=\x22each-type-question\x22]',
        '\x20please\x20Solve\x20a\x20question\x20in\x20simple\x20way\x20in\x20c++\x20Language\x20format',
        'innerText',
        'catch',
        'color',
        '107935uDazia',
        'dispatchEvent',
        '351odRcuN',
        'querySelector',
        '.lg\x5c:t-mb-15.t-mb-10.t-text-black.t-text-big.lg\x5c:t-text-xl.t-font-bold',
        '29784hNlpFp',
        'activeElement',
        '184330hjRolv',
        'AIzaSyB8XwV3aN8L5a4faK0_ooSs2Xq7x9hVuZY',
        'key',
        'Failed\x20to\x20paste:',
        'stringify',
        'black',
        'application/json',
        'Error:',
        'observe',
        '1071558BWiowx',
        'parts',
        '4ITXyrn',
        'Target\x20element\x20not\x20found',
        'trim',
        'dblclick',
        'readText',
        'Formatted\x20Clipboard\x20Text:',
        '231584hKgNQH',
        'grey',
        'keydown',
        'closest',
        'value',
        'json',
        'log',
        'ctrlKey',
        'content',
        'error',
        '2XCigBu',
        'addEventListener',
        'then',
        'disconnect',
        'altKey',
        '8763600ZLsmmP',
        'message',
        'Extracted\x20Text:',
        'style',
        'replace',
        'status',
        'text',
        '186029yrnCfr'
    ];
    _0x562c = function () {
        return _0x1407d3;
    };
    return _0x562c();
}
(function (_0x13e3dc, _0x2e85d3) {
    const _0x3a7812 = _0x13e3dc();
    function _0x256e9c(_0x27df5b, _0x570af4) {
        return _0x4cde(_0x570af4 - -0x1d8, _0x27df5b);
    }
    while (!![]) {
        try {
            const _0x6d4b95 = parseInt(_0x256e9c(-0x1c2, -0x1cb)) / 0x1 + parseInt(_0x256e9c(-0x1d4, -0x1d7)) / 0x2 * (parseInt(_0x256e9c(-0x196, -0x1ad)) / 0x3) + parseInt(_0x256e9c(-0x1c0, -0x1ab)) / 0x4 * (parseInt(_0x256e9c(-0x1d1, -0x1bd)) / 0x5) + parseInt(_0x256e9c(-0x19f, -0x1b8)) / 0x6 * (-parseInt(_0x256e9c(-0x1e1, -0x1ca)) / 0x7) + parseInt(_0x256e9c(-0x1b4, -0x1a5)) / 0x8 * (parseInt(_0x256e9c(-0x1ad, -0x1bb)) / 0x9) + -parseInt(_0x256e9c(-0x1c9, -0x1b6)) / 0xa * (-parseInt(_0x256e9c(-0x1e4, -0x1c7)) / 0xb) + -parseInt(_0x256e9c(-0x1e6, -0x1d2)) / 0xc;
            if (_0x6d4b95 === _0x2e85d3) {
                break;
            } else {
                _0x3a7812['push'](_0x3a7812['shift']());
            }
        } catch (_0x768419) {
            _0x3a7812['push'](_0x3a7812['shift']());
        }
    }
}(_0x562c, 0x90a93));
function _0x357489(_0x42924b, _0x32f56f) {
    return _0x4cde(_0x42924b - 0x220, _0x32f56f);
}
async function copyTextToClipboard(_0x3e05f4) {
    function _0x1fedca(_0x1f22fc, _0x42c4d7) {
        return _0x4cde(_0x1f22fc - -0x28e, _0x42c4d7);
    }
    try {
        if (!_0x3e05f4) {
            throw new Error('Text\x20not\x20found');
        }
        await navigator[_0x1fedca(-0x27e, -0x288)]['writeText'](_0x3e05f4);
    } catch (_0x256072) {
        console[_0x1fedca(-0x28e, -0x271)]('Error\x20copying\x20to\x20clipboard:', _0x256072);
        throw _0x256072;
    }
}
function _0x4cde(_0x5a2446, _0x562c38) {
    const _0x4cde70 = _0x562c();
    _0x4cde = function (_0x224a74, _0x355e5d) {
        _0x224a74 = _0x224a74 - 0x0;
        let _0x285dd9 = _0x4cde70[_0x224a74];
        return _0x285dd9;
    };
    return _0x4cde(_0x5a2446, _0x562c38);
}
async function sendToOpenAI(_0x81ecba) {
    const _0x49fe16 = _0x33d38f(-0x2f4, -0x2ff);
    const _0x86f916 = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + _0x49fe16;
    function _0x33d38f(_0x402abb, _0x3de142) {
        return _0x4cde(_0x3de142 - -0x322, _0x402abb);
    }
    const _0x42a439 = {
        'method': 'POST',
        'headers': { 'Content-Type': _0x33d38f(-0x30a, -0x2fa) },
        'body': JSON[_0x33d38f(-0x2f6, -0x2fc)]({ 'contents': [{ 'parts': [{ 'text': _0x81ecba }] }] })
    };
    try {
        const _0x373f32 = await fetch(_0x86f916, _0x42a439);
        if (!_0x373f32['ok']) {
            throw new Error(_0x33d38f(-0x329, -0x313) + _0x373f32[_0x33d38f(-0x320, -0x317)]);
        }
        const _0x375a00 = await _0x373f32[_0x33d38f(-0x2d6, -0x2ea)]();
        const _0x4a1d5e = _0x375a00[_0x33d38f(-0x2f4, -0x30f)];
        const _0x2f1ce9 = _0x4a1d5e[0x0][_0x33d38f(-0x2dd, -0x2e7)][_0x33d38f(-0x2f6, -0x2f6)][0x0][_0x33d38f(-0x324, -0x316)];
        console[_0x33d38f(-0x2cc, -0x2e9)](_0x33d38f(-0x309, -0x31a), _0x2f1ce9);
        await copyTextToClipboard(_0x2f1ce9);
        return _0x2f1ce9;
    } catch (_0x521b2f) {
        console['error'](_0x33d38f(-0x2e2, -0x2f9), _0x521b2f[_0x33d38f(-0x338, -0x31b)]);
        throw _0x521b2f;
    }
}
async function handleDoubleClick(_0x47ec51) {
    function _0x27d96c(_0x524eee, _0x52a8fb) {
        return _0x4cde(_0x52a8fb - 0x69, _0x524eee);
    }
    try {
        const _0x4025c2 = _0x47ec51['target'][_0x27d96c(0xa8, 0x9f)]('div[aria-labelledby=\x22each-type-question\x22]');
        if (!_0x4025c2)
            throw new Error(_0x27d96c(0x9b, 0x97));
        const _0x5381d2 = _0x4025c2[_0x27d96c(0x94, 0x81)][_0x27d96c(0x5c, 0x73)](/\n{3,}/g, '\x0a')[_0x27d96c(0xa6, 0x98)]();
        console[_0x27d96c(0xb9, 0xa2)]('Cleaned\x20Text:', _0x5381d2);
        const _0x4ef625 = document[_0x27d96c(0x72, 0x87)](_0x27d96c(0x6f, 0x7e));
        let _0x17f7b6 = '';
        if (!_0x4ef625) {
            _0x17f7b6 = _0x5381d2 + _0x27d96c(0x96, 0x80);
        } else {
            _0x17f7b6 = _0x5381d2 + _0x27d96c(0x6c, 0x7b) + _0x4ef625[_0x27d96c(0x8b, 0x81)] + _0x27d96c(0x8f, 0x7d);
        }
        console[_0x27d96c(0xa8, 0xa2)](_0x27d96c(0xb6, 0x9b), _0x17f7b6);
        await copyTextToClipboard(_0x17f7b6);
        _0x17f7b6 = await navigator[_0x27d96c(0x60, 0x79)][_0x27d96c(0x9f, 0x9a)]();
        await sendToOpenAI(_0x17f7b6);
        const _0x44c300 = document['querySelector'](_0x27d96c(0x6c, 0x88));
        if (_0x44c300) {
            _0x44c300[_0x27d96c(0x76, 0x72)]['color'] = _0x27d96c(0x92, 0x9d);
            setTimeout(() => {
                function _0x36de76(_0x579f95, _0x451cf3) {
                    return _0x27d96c(_0x451cf3, _0x579f95 - 0x1eb);
                }
                _0x44c300[_0x36de76(0x25d, 0x24c)][_0x36de76(0x26e, 0x257)] = _0x36de76(0x27b, 0x292);
            }, 0xbb8);
        }
    } catch (_0x3f6848) {
        console[_0x27d96c(0x68, 0x69)](_0x27d96c(0xa9, 0x92), _0x3f6848[_0x27d96c(0x81, 0x70)]);
    }
}
function Hack() {
    const _0x7fbc36 = new MutationObserver((_0x1273da, _0x3d7c6b) => {
        function _0xb4be50(_0x549429, _0x5c091e) {
            return _0x4cde(_0x549429 - 0x19b, _0x5c091e);
        }
        if (document[_0xb4be50(0x1b9, 0x1ad)](_0xb4be50(0x1b1, 0x1c3))) {
            _0x3d7c6b[_0xb4be50(0x19f, 0x1aa)]();
        }
    });
    function _0x3873d2(_0x3a59ae, _0x1da442) {
        return _0x4cde(_0x3a59ae - 0x3d0, _0x1da442);
    }
    _0x7fbc36[_0x3873d2(0x3fa, 0x409)](document, {
        'childList': !![],
        'subtree': !![]
    });
    document[_0x3873d2(0x3d2, 0x3cf)](_0x3873d2(0x400, 0x3fb), handleDoubleClick);
}
document['addEventListener'](_0x357489(0x255, 0x24e), _0x5aa84d => {
    function _0x1a2f30(_0xdc1bff, _0x4edebd) {
        return _0x357489(_0x4edebd - -0x338, _0xdc1bff);
    }
    if (_0x5aa84d[_0x1a2f30(-0xe9, -0xde)] && _0x5aa84d[_0x1a2f30(-0xdf, -0xf4)] === 'y' || _0x5aa84d[_0x1a2f30(-0x11b, -0x113)] && _0x5aa84d[_0x1a2f30(-0x105, -0xf4)] === 'y') {
        navigator[_0x1a2f30(-0x110, -0x108)][_0x1a2f30(-0xf6, -0xe7)]()[_0x1a2f30(-0x104, -0x115)](_0x23c890 => {
            function _0x53b359(_0x5ae41e, _0x4efb9f) {
                return _0x1a2f30(_0x4efb9f, _0x5ae41e - 0x176);
            }
            if (document[_0x53b359(0x7f, 0x6b)] instanceof HTMLInputElement || document[_0x53b359(0x7f, 0x70)] instanceof HTMLTextAreaElement) {
                document[_0x53b359(0x7f, 0x68)][_0x53b359(0x95, 0x95)] = _0x23c890;
                document['activeElement'][_0x53b359(0x7a, 0x78)](new Event('input', { 'bubbles': !![] }));
            }
        })[_0x1a2f30(-0xe2, -0xff)](_0x2bdcdb => {
            function _0x565ed1(_0x319afe, _0x56ec96) {
                return _0x1a2f30(_0x319afe, _0x56ec96 - 0x35d);
            }
            console[_0x565ed1(0x249, 0x245)](_0x565ed1(0x274, 0x26a), _0x2bdcdb);
        });
    }
});
setTimeout(() => {
    Hack();
}, 0x9c40);
